<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="users">
	<!-- 회원가입 시 기본 auth_code 0으로 잡아 승인 대기 -->
	<insert id="insert" parameterType="UserVo">
		insert into users (user_name, password, branch_id, auth_code, email)
		values(#{name}, #{password}, #{branchId}, 0, #{email})
	</insert>

	<!-- name 정보로 사용자 정보 select (중복 가입 막기) -->
	<select id="selectUserByName" parameterType="string" resultType="UserVo">
		select user_no as no, user_name as name from users
		where user_name = #{value}
	</select>

	<!-- 로그인용 name 정보로 사용자 정보 select -->
    <select id="selectUserByNameForLogin" parameterType="string" resultType="UserVo">
        select user_no as no, user_name as name, password, email, branch_id as branchId, auth_code as authCode,
        TEMPORARY_PASSWORD_CREATED_AT as temporaryPasswordCreatedAt
        from users where user_name = #{username}
    </select>
    
    <!-- 마이 페이지의 사용자 정보 select -->
	 <select id="selectUserForProfile" resultType="UserVo">
	    select u.user_no as no, u.user_name as name, u.email, u.password, 
	           u.branch_id as branchId, u.auth_code as authCode, b.branch_name as branchName
	    from users u
	    left join branch b on u.branch_id = b.branch_id
	    where u.user_name = #{username}
	</select>

	<!-- name과 비밀번호로 사용자 정보 select (로그인) -->
	<select id="selectUserByNameAndPassword" parameterType="map" resultType="UserVo">
		select user_no as no, user_name as name, branch_id as branchId, auth_code as authCode
		from users where user_name = #{name} and password = #{password}
	</select>

	<!-- user list 전체 출력 -->
	<select id="selectUserList" resultType="UserVo">
		SELECT user_no AS no, user_name AS name, branch_id AS branchId, auth_code AS authCode
		FROM users
		ORDER BY authCode, user_no DESC
	</select>

	<!-- 승인 대기 계정 갯수 출력 -->
	<select id="countUserCode0" resultType="long">
		SELECT COUNT(*) FROM users WHERE auth_code = '0'
	</select>

	<!-- 계정 삭제 -->
	<delete id="deleteUserAcount" parameterType="long">
		delete from users where user_no = #{no}
	</delete>

	<!-- 계정 승인 기능 -->
	<update id="confirmUserAcount" parameterType="map">
		update users set auth_code = #{authCode} where user_no = #{no}
	</update>
	
	<!-- 지점 목록 출력 기능 -->
	<select id = "selectBranchList" resultType="UserVo">
		SELECT branch_id as branchId, branch_name as branchName FROM branch
	</select>
	
	<!-- 비밀번호 변경 기능 -->
	<update id = "updatePassword" parameterType="map">
		UPDATE users
		SET password = #{newPassword}
		WHERE user_name = #{name}
	</update>
	
 	<!-- 임시 비밀번호 업데이트 -->
    <update id="updateTemporaryPassword" parameterType="map">
        UPDATE users
        SET password = #{temporaryPassword}, temporary_password_created_at = #{createdAt}
        WHERE user_name = #{name}
    </update>
    
	<!-- 사용자 정보 조회 쿼리 -->
	<select id="getUserByUsername" parameterType="map" resultType="UserVo">
	    SELECT user_no AS no, user_name AS name, password, email, branch_id AS branchId, auth_code AS authCode, temporary_password_created_at AS temporaryPasswordCreatedAt
	    FROM users
	    WHERE user_name = #{name}
	</select>

	<update id="resetTemporaryPasswordCreatedAt" parameterType="string">
	    UPDATE users
	    SET temporary_password_created_at = NULL
	    WHERE user_name = #{name}
	</update>

	<select id="selectBranchUserList" parameterType="String" resultType="UserVo">
		SELECT user_no AS no, user_name AS name, branch_id AS branchId, auth_code AS authCode
		FROM users
		WHERE (auth_code = '2' OR branch_id = #{branchId}) and auth_code != 0 ORDER BY name
	</select>

	<select id="selectUserName" resultType="UserVo">
		SELECT user_no AS no, user_name AS name, branch_id AS branchId, auth_code AS authCode
		FROM users
		where auth_code != 0
		ORDER BY authCode, user_no DESC
	</select>
</mapper>