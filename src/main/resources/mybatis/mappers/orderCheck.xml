<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="orderCheck">

    <!-- order check list -->
    <select id="orderCheckList" resultType="OrderVo">
        SELECT 
            bo.order_id AS orderId, 
            bo.branch_id AS branchId,
            bo.order_date AS orderDate,
            bo.checked, 
            bo.user_name AS userName,
            b.branch_name AS branchName
        FROM
            book_order bo
        JOIN branch b ON bo.branch_id = b.branch_id
        ORDER BY
            bo.order_date DESC
    </select>

    <!-- order check list 지점 별로 구분하기 -->
    <select id="orderCheckBranch" parameterType="String" resultType="OrderVo">
        SELECT 
            bo.order_id AS orderId, 
            bo.branch_id AS branchId,
            bo.order_date AS orderDate, 
            bo.checked, 
            bo.user_name AS userName,
            b.branch_name AS branchName
        FROM 
            book_order bo
        JOIN 
            branch b ON bo.branch_id = b.branch_id
        WHERE 
            bo.branch_id = #{id}
        ORDER BY
            bo.order_date DESC
    </select>

    <!-- order detail 조회 -->
    <select id="selectOrderDetail" parameterType="String" resultType="OrderVo">
        SELECT 
            bo.order_id AS orderId, 
            bo.branch_id AS branchId,
            b.branch_name AS branchName,
            bo.order_date AS orderDate, 
            bo.checked,
            od.book_code AS bookCode,
            od.quantity AS quantity,
            bl.book_name AS bookName
        FROM 
            book_order bo
        JOIN 
            order_detail od ON bo.order_id = od.order_id
        JOIN 
            book_list bl ON od.book_code = bl.book_code
        JOIN 
            branch b ON bo.branch_id = b.branch_id
        WHERE 
            bo.order_id = #{id}
    </select>

    <!-- 오더 미확인 갯수 출력 -->
    <select id="countNewOrder" resultType="long">
        SELECT COUNT(*) 
        FROM book_order 
        WHERE checked = '0'
    </select>

    <!-- order 거절 -> orderList의 order_check만 코드 수정 -->
    <update id="refuseOrder" parameterType="String">
        UPDATE book_order 
        SET checked = '1' 
        WHERE order_id = #{no}
    </update>

    <!-- order 승인 -> orderList의 order_check 코드 수정 -->
    <update id="confirmOrderCode" parameterType="String">
        UPDATE book_order
        SET checked = '2' 
        WHERE order_id = #{no}
    </update>

    <!-- get branch id by order id -->
    <select id="getBranchId" parameterType="String" resultType="String">
        SELECT branch_id AS branchId 
        FROM book_order 
        WHERE order_id = #{id}
    </select>

    <!-- order 승인2 -> stock_in table에 새로운 데이터 입력 -->
    <insert id="confirmAndInsertStockIn" parameterType="map">
        INSERT INTO stock_in (order_id, in_date, checked_in, branch_id)
        VALUES (#{orderId}, (SYSDATE + INTERVAL '3' DAY), '0', #{branchId})
    </insert>

    <!-- order 승인3 -> stock_in 테이블의 in_id 받아오기 -->
    <select id="getStockInIdByOrderId" parameterType="String" resultType="int">
        SELECT in_id 
        FROM stock_in 
        WHERE order_id = #{id}
    </select>

    <!-- order 승인4 -> in_detail에 데이터 입력 -->
    <insert id="confirmAndInsertInDetail" parameterType="StockVo">
        INSERT INTO in_detail (in_id, book_code, quantity)
        VALUES (#{id}, #{bookCode}, #{quantity})
    </insert>

    <!-- 지점 목록 조회 -->
    <select id="getBranchList" resultType="OrderVo">
        SELECT branch_id AS branchId, branch_name AS branchName 
        FROM branch
    </select>
    
    <!-- 승인된 지점상세 발주내역 요약 조회 -->
    <select id="getBranchListSummary" resultType="OrderVo">
        SELECT 
            bo.order_id AS orderId,
            bo.branch_id AS branchId,
            bo.order_date AS orderDate,
            bl.book_name AS bookName,
            od.quantity AS quantity,
            bo.checked -- Example additional field
        FROM 
            book_order bo
        LEFT JOIN 
            order_detail od ON bo.order_id = od.order_id
        LEFT JOIN 
            book_list bl ON od.book_code = bl.book_code
        WHERE 
            bo.checked = '2'
            AND bo.order_id IS NOT NULL
            AND bo.branch_id IS NOT NULL
            AND bo.order_date IS NOT NULL
            AND bl.book_name IS NOT NULL
            AND od.quantity IS NOT NULL
        ORDER BY 
            bo.order_date
    </select>
</mapper>
