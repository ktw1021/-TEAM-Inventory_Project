<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="orderCheck">
	
	<!-- 기제 개선 쿼리문 -->
	<select id="newOrderCheckList" parameterType = "map" resultType = "OrderVo">
		SELECT bo.order_id AS orderId, bo.branch_id AS branchId, bo.order_date AS orderDate, bo.checked, bo.user_name AS userName, b.branch_name AS branchName
		FROM book_order bo JOIN branch b ON bo.branch_id = b.branch_id 
		<where>
	        <if test="branchId != null and branchId.trim() != ''">
	            bo.branch_id = #{branchId}
	        </if>
	        <if test="checked != null and checked != ''">
	            AND bo.checked = #{checked}
	        </if>
	        <if test="userName != null and userName != ''">
	            AND bo.user_name = #{userName}
	        </if>
    	</where>
		order by order_date desc
	</select>

	<!-- order detail 조회 -->
	<select id="selectOrderDetail" parameterType="String" resultType="OrderVo">
		select bo.order_id as orderId, bo.branch_id as branchId, b.branch_name as branchName, bo.order_date as orderDate, bo.checked,
		od.book_code as bookCode, od.quantity as quantity, bl.book_name as bookName
		from book_order bo join order_detail od on bo.order_id = od.order_id
		join book_list bl on od.book_code = bl.book_code
		join branch b on bo.branch_id = b.branch_id
		where bo.order_id = #{id}
	</select>

	<!-- 오더 미확인 갯수 출력 -->
	<select id="countNewOrder" resultType="long">
		SELECT COUNT(*) FROM
		book_order WHERE checked = '0'
	</select>

	<!-- order 거절 -> orderList의 order_chheck만 코드 수정 -->
	<update id="refuseOrder" parameterType="String">
		UPDATE book_order SET
		checked = '1' WHERE order_id = #{no}
	</update>
	
	<!-- stockIn 에서 삭제하는 쿼리 -->
	<delete id="refuseAndDeleteStockIn" parameterType="String">
		delete stock_in where order_id = #{orderId}
	</delete>

	<!-- order 승인 -> orderList의 order_check 코드 수정 -->
	<update id="confirmOrderCode" parameterType="String">
		update book_order
		set checked = '2' where order_id = #{no}
	</update>

	<select id="getBranchId" parameterType="String"
		resultType="String">
		select branch_id as branchId from book_order where order_id
		= #{id}
	</select>

	<!-- order 승인2 -> stock_in table에 새로운 데이터 입력 -->
	<insert id="confirmAndInsertStockIn" parameterType="map">
		insert into
		stock_in (order_id, checked_in, branch_id) values
		(#{orderId}, '0', #{branchId})
	</insert>

	<!-- order 승인3 -> stock_in 테이블의 in_id 받아오기 -->
	<select id="getStockInIdByOrderId" parameterType="String"
		resultType="int">
		select in_id from stock_in where order_id = #{id}
	</select>

	<!-- order 승인4 -> in_detail에 데이터 입력 -->
	<insert id="confirmAndInsertInDetail" parameterType="StockVo">
		insert into
		in_detail (in_id, book_code, quantity) values(#{id}, #{bookCode},
		#{quantity})
	</insert>
	
	<select id="getBranchList" resultType="OrderVo">
		SELECT branch_id as branchId, branch_name as branchName FROM branch
	</select>
	
	<!-- getSumOrderQuantity 쿼리 수정 -->
	<select id="getSumOrderQuantity" parameterType="map" resultType="OrderVo">
	    SELECT 
	        od.book_code AS bookCode, 
	        bl.book_name AS bookName, 
	        SUM(od.quantity) AS inventory
	    FROM 
	        order_detail od
	        JOIN book_list bl ON od.book_code = bl.book_code
	        JOIN book_order bo ON bo.order_id = od.order_id
	    WHERE 
	        <if test="orderIds == null or orderIds.isEmpty()">
	            bo.checked = 2
	        </if>
	        <if test="orderIds != null and !orderIds.isEmpty()">
	            bo.order_id IN 
	            <foreach collection="orderIds" item="id" open="(" separator="," close=")">
	                #{id}
	            </foreach>
	        </if>
	    GROUP BY 
	        od.book_code, bl.book_name
	    ORDER BY 
	        bl.book_name
	</select>
	
	<!-- getBranchsOrderQuantity 쿼리 수정 -->
	<select id="getBranchsOrderQuantity" parameterType="map" resultType="OrderVo">
	    SELECT 
	        bo.branch_id AS branchId, 
	        b.branch_name AS branchName, 
	        od.book_code AS bookCode, 
	        bl.book_name AS bookName, 
	        SUM(od.quantity) AS inventory
	    FROM 
	        book_order bo
	        JOIN order_detail od ON bo.order_id = od.order_id
	        JOIN book_list bl ON od.book_code = bl.book_code
	        JOIN branch b ON bo.branch_id = b.branch_id
	    WHERE 
	        <if test="orderIds == null or orderIds.isEmpty()">
	            bo.checked = 2
	        </if>
	        <if test="orderIds != null and !orderIds.isEmpty()">
	            bo.order_id IN 
	            <foreach collection="orderIds" item="id" open="(" separator="," close=")">
	                #{id}
	            </foreach>
	        </if>
	    GROUP BY 
	        bo.branch_id, b.branch_name, od.book_code, bl.book_name
	    ORDER BY 
	        bl.book_name
	</select>
	
	<!-- 발주 확정을 위한 orderId 찾기 -->
	<select id="getOrderId" resultType = "int">
		select order_id as orderId from book_order where checked = 2
	</select>
	
	<!-- 발주 확정 후 코드 바꾸기 -->
	<update id="goodOrder" parameterType="int">
		UPDATE book_order SET
		checked = '3' WHERE order_id = #{no}
	</update>
	
	<select id="getGroupIdSeq" resultType="int">
		SELECT group_id_seq.NEXTVAL FROM dual
	</select>
	
	<insert id="insertConfirm" parameterType = "map">
		insert into confirm_order (group_id, order_id, confirm_date) values (#{groupId}, #{orderId}, sysdate)
	</insert>
	
	<select id="getListHistory" resultType="OrderVo">
	SELECT group_id as branchId, LISTAGG(order_id, ', ') WITHIN GROUP (ORDER BY order_id) AS orderId, MIN(confirm_date) AS orderDate 
	FROM CONFIRM_ORDER GROUP BY group_id ORDER by group_id desc
	</select>
	
</mapper>