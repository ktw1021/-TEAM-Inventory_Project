<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bookInventory">

	<!-- 기제 개선 쿼리 invenList -->
	<select id="dynamicInvenList" parameterType="map" resultType="BookInventoryVo">
		select bi.branch_id as branchId, bi.book_code as bookCode, bi.inventory as inventory,
			bl.book_name as bookName, bl.kindcode as kindCode, bl.price as price, outDate, inDate
		from branch_inventory bi
		join book_list bl on bi.book_code = bl.book_code
		LEFT JOIN (
			SELECT od.book_code, MAX(so.out_date) AS outDate FROM out_detail od
			JOIN stock_out so ON od.out_id = so.out_id where branch_id = #{branchId} GROUP BY od.book_code) so 
		ON bi.book_code = so.book_code
		LEFT JOIN (
			SELECT id.book_code, MAX(si.in_date) AS inDate FROM in_detail id
			JOIN stock_in si ON id.in_id = si.in_id where branch_id = #{branchId} GROUP BY id.book_code) si
		ON bi.book_code = si.book_code
		where bi.branch_id = #{branchId}
		<if test="keyword != null and keyword.trim() != ''">
			and upper(bl.book_name) like '%' || upper(trim(#{keyword})) || '%'
		</if>
		<if test="check != null and check  == 'check'">
				<![CDATA[and bi.inventory <> 0]]>
		</if>
		<if test="orderBy != null">
			order by ${orderBy}
		</if>
	</select>

	<!-- book inventory list -->
	<select id="selectInventory" parameterType="string" resultType="BookInventoryVo">
		select bi.branch_id as branchId, bi.book_code as bookCode, bl.book_name as bookName, bi.inventory as inventory, bl.price as price, bl.kindcode as kindCode
		from branch_inventory bi join book_list	bl on bi.book_code = bl.book_code
		where bi.branch_id = #{id} order by kindcode desc, bl.book_name
	</select>

	<!-- book inventory keyword search -->
	<select id="searchInventory" parameterType="map" resultType="BookInventoryVo">
    	<![CDATA[
    		select bi.branch_id as branchId, bi.book_code as bookCode, bl.book_name as bookName, bi.inventory as inventory, bl.price as price, bl.kindcode as kindCode
    		from branch_inventory bi join book_list bl on bi.book_code = bl.book_code 
		    where bi.branch_id = #{id} and upper(bl.book_name) like '%' || upper(trim(#{keyword})) || '%'
    	]]>
	    <if test="key != '' and ordering != ''">
	        order by ${key} ${ordering}
	    </if>
	    <if test="key != '' and ordering == ''">
	        order by ${key} desc
	    </if>
	    <if test="key == '' and ordering != ''">
	        order by kindCode ${ordering}
	    </if>
	    <if test="key == '' and ordering == ''">
	        order by kindCode desc, bl.book_name
	    </if>
	</select>

	<!-- 계정 승인 시 인벤토리 채워주는 역할 -->
	<insert id="initialization" parameterType="map">
		insert intobranch_inventory (branch_id, book_code, inventory) values (#{id}, #{bookCode}, 0)
	</insert>

	<select id="getInventory" parameterType="BookInventoryVo" resultType="int">
		SELECT inventory FROM branch_inventory WHERE branch_id = #{branchId} and book_code = #{bookCode}
	</select>
	
	<!-- 입고 합 가져오기 -->
	<select id="inInventorySum" parameterType = "map" resultType = "BookInventoryVo">
		select book_code as bookCode, sum(quantity) as inventory from stock_in si join in_detail id on si.in_id = id.in_id 
		where branch_id = #{branchId}
		<if test = "startDate != null and startDate.trim() != ''">
			<![CDATA[and in_date >= #{startDate}]]>
		</if>
		<if test="endDate != null and endDate.trim() != ''">
        	<![CDATA[and in_date < TO_DATE(#{endDate}, 'YYYY/MM/DD') + 1]]>
    	</if>
		group by book_code
	</select>
	
	<!-- 출고 합 가져오기 -->
	<select id="outInventorySum" parameterType = "map" resultType = "BookInventoryVo">
		select book_code as bookCode, sum(quantity) as inventory from stock_out so join out_detail od on so.out_id = od.out_id 
		where branch_id = #{branchId}
		<if test = "startDate != null and startDate.trim() != ''">
			<![CDATA[and out_date >= #{startDate}]]>
		</if>
		<if test="endDate != null and endDate.trim() != ''">
        	<![CDATA[and out_date < TO_DATE(#{endDate}, 'YYYY/MM/DD') + 1]]>
    	</if>
		group by book_code
	</select>
	
	<select id = "shikanokonokonoko" parameterType = "map" resultType = "BookInventoryVo">
		select book_code as bookCode, sum(quantity) as inventory from stock_in si join in_detail id on si.in_id = id.in_id 
		where branch_id = #{branchId}
		<![CDATA[and in_date < TO_DATE(#{startDate}, 'YYYY/MM/DD')]]>
		group by book_code
	</select>
	
	<select id="koshitanntann" parameterType = "map" resultType = "BookInventoryVo">
		select book_code as bookCode, sum(quantity) as inventory from stock_out so join out_detail od on so.out_id = od.out_id 
		where branch_id = #{branchId}
		<![CDATA[and out_date < TO_DATE(#{startDate}, 'YYYY/MM/DD')]]>
		group by book_code
	</select>
	
	<select id = "getBranchNameByBranchId" parameterType = "String" resultType="String">
		select branch_name as branchName from branch where branch_id = #{branch_id}
	</select>
</mapper>