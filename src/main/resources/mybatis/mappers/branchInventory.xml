<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bookInventory">
	
	<!-- 기제 개선 쿼리 invenList -->
	<select id = "dynamicInvenList" parameterType = "map" resultType="BookInventoryVo">
			select bi.branch_id as branchId, bi.book_code as bookCode, bi.inventory as inventory, 
				bl.book_name as bookName, bl.kindcode as kindCode, bl.price as price, outDate, inDate
			from branch_inventory bi 
			join book_list bl on bi.book_code = bl.book_code 
			LEFT JOIN (
                SELECT od.book_code, MAX(so.out_date) AS outDate
                FROM out_detail od JOIN stock_out so ON od.out_id = so.out_id where branch_id = #{branchId}
                GROUP BY od.book_code) so ON bi.book_code = so.book_code
            LEFT JOIN (
                SELECT id.book_code, MAX(si.in_date) AS inDate 
                FROM in_detail id JOIN stock_in si ON id.in_id = si.in_id where branch_id = #{branchId}
                GROUP BY id.book_code) si ON bi.book_code = si.book_code
			where bi.branch_id = #{branchId}
			<if test = "keyword != null and keyword.trim() != ''">
				and upper(bl.book_name) like '%' || upper(trim(#{keyword})) || '%'
			</if>
			<if test = "check != null and check  == 'check'">
				<![CDATA[and bi.inventory <> 0]]>
			</if>
			<if test = "orderBy != null">
				order by ${orderBy}
			</if>
	</select>

	<!-- book inventory list -->
	<select id="selectInventory" parameterType="string" resultType="BookInventoryVo">
		select bi.branch_id as branchId, bi.book_code as bookCode, bl.book_name as bookName, bi.inventory as inventory, bl.price as price,  bl.kindcode as kindCode
		from branch_inventory bi join book_list bl on bi.book_code = bl.book_code 
		where bi.branch_id = #{id} order by inventory desc

	</select>

	<!-- book inventory keyword search -->
	<select id= "searchInventory" parameterType="map" resultType="BookInventoryVo">
		select bi.branch_id as branchId, bi.book_code as bookCode, bl.book_name as bookName, bi.inventory as inventory, bl.price as price, bl.kindcode as kindCode
		from branch_inventory bi join book_list bl on bi.book_code = bl.book_code 
		where bi.branch_id = #{id} and upper(bl.book_name) like '%' || upper(trim(#{keyword})) || '%' order by inventory desc
	</select>

	<select id="selectInventoryCheck" parameterType="string" resultType="BookInventoryVo">
		<![CDATA[
    		select bi.branch_id as branchId, bi.book_code as bookCode, bl.book_name as bookName, bi.inventory as inventory, bl.price as price 
    		from branch_inventory bi 
    		join book_list bl on bi.book_code = bl.book_code 
    		where bi.branch_id = #{id} and bi.inventory <> 0 
    		order by inventory desc
    		]]>
	</select>

	<select id="searchInventoryCheck" parameterType="map" resultType="BookInventoryVo">
		<![CDATA[
    		select bi.branch_id as branchId, bi.book_code as bookCode, bl.book_name as bookName, bi.inventory as inventory, bl.price as price
    		from branch_inventory bi 
    		join book_list bl on bi.book_code = bl.book_code 
    		where bi.branch_id = #{id} and bi.inventory <> 0 and upper(bl.book_name) like '%' || upper(trim(#{keyword})) || '%'
    		order by inventory desc
    		]]>
	</select>

	<insert id="initialization" parameterType="map">
		insert into branch_inventory (branch_id, book_code, inventory) values (#{id}, #{bookCode}, 0)
	</insert>

	<select id="getInventory" parameterType="BookInventoryVo" resultType="int">
		SELECT inventory FROM branch_inventory WHERE branch_id = #{branchId} and book_code = #{bookCode}
	</select>
	
	<select id="inInventorySum" parameterType = "map" resultType = "BookInventoryVo">
		select book_code as bookCode, sum(quantity) as inventory from stock_in si join in_detail id on si.in_id = id.in_id 
		where branch_id = #{branchId}
		<if test = "stockInDate != null and stockInDate.trim() != ''">
			and in_date > #{stockInDate}
		</if>
		group by book_code
	</select>
	
	<select id="outInventorySum" parameterType = "map" resultType = "BookInventoryVo">
		select book_code as bookCode, sum(quantity) as inventory from stock_out so join out_detail od on so.out_id = od.out_id 
		where branch_id = #{branchId}
		<if test = "stockInDate != null and stockInDate.trim() != ''">
			and out_date > #{stockInDate}
		</if>
		group by book_code
	</select>
</mapper>